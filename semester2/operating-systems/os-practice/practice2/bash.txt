1. Write a bash script that counts all the C files from a given directory and all of its subdirectories.

2. Write a bash script that counts all the lines of code in the C files from the directory given as
command-line argument, excluding lines that are empty or contain only spaces.

3. Write a bash script that counts all the lines of code in the C files from the directory given as
command-line argument and all its subdirectories, excluding lines that are empty or contain
only spaces.

4. Write a bash script that receives any number of command line arguments and prints on the
screen, for each argument, if it is a file, a directory, a number or something else.

5. Write a bash script that keeps reading strings from the keyboard until the name of a readable
regular file is given.

6. Write a bash script that sorts the file given as command line arguments in ascending order
according to their file size in bytes.

7. Write a bash script that calculates the sum of the sizes (in bytes) of all regular files in a folder
given as a parameter.(use test to check if the folder exists and if a given file is a regular file).

8. Write a script that reads filenames until the word "stop" is entered. For each filename, check if
it is a text file and if it is, print the number of words on the first line.(Hint: test command to
check if regular file; file command to check if text file).

9. Write a script that receives as command line arguments pairs consisting of a filename and a
word. For each pair, check if the given word appears at least 3 times in the file and print a
corresponding message.

10. Write a bash script that sorts all files given as command line arguments descending by size.
(first check if an argument is a file).

11. Write a script that extracts from all the C source files given as command line arguments the
included libraries and saves them in a file. (use the file command to check if a file is a C source
file).

12. Write a script that monitors the state of a given folder and prints a message when something
changes.

13. Find recursively in a given directory all the symbolic links, and report those that point to
files/directories that no longer exist. Use option -L to test if a path is a symbolic link, and option
-e to test if it exists (will return false if the target to which the link points does not exist)

14. Write a bash script that receives a folder name as an argument. Find recursively in the folder
the number of times each file name is repeated.

15. Calculate the average of all process ids in the system per user.

16. Write a script that receives program/process names as command line arguments. The script
will monitor all the processes in the system, and whenever a program with one of those names
is run, the script will kill it and display a message. (see commands ps, kill, killall).

17. Write a script that receives a directory as a command line argument. The script will delete all
the C source files from the directory and will display all other text files sorted alphabetically.

18. Write a script that finds recursively in the current folder and displays all the regular files that
have write permissions for everybody (owner, group, other). Then the script removes the write
permissions from everybody. Hint: use chmod's symbolic permissions mode (see the manual).

19. Consider a file containing a username on each line. Generate a comma-separated string with
email addresses of the users that exist. The email address will be obtained by appending
"@scs.ubbcluj.ro" at the end of each username. Make sure the generated string does NOT
end in a comma.

20. Write a shell script that receives any number of words as command line arguments, and
continuously reads from the keyboard one file name at a time. The program ends when all
words received as parameters have been found at least once across the given files.
Example:
Assume that
file1.txt contains word1 and word2
file2.txt does not contain any of the 3 words
file3.txt contains word2 and word 3
./script.sh word1 word2 word3
We input the following:
file1.txt
file2.txt
file3.txt
The program stops after reading file3.txt because
word1 has been found in file1.txt
word2 has been found in file1.txt and file3.txt
word3 has been found in file3.txt

21. Write a shell script that, for all the users in /etc/passwd, creates a file with the same name as
the username and writes in it all the ip addresses from which that user has logged in. (hint: use
the last command to find the ip addresses)

22. Create a bash script that displays every second the process count per user sorted descending
by process count for all users specified as command line arguments. If no arguments are
given, the script will display the process count per user for all users.

23. Create a bash script that finds all the text files in a specified folder (the current folder if there is
no specified folder). For all such files, the script will report the filesize, permissions, and
number of unique lines.
